{"version":3,"sources":["components/Pixel.js","components/Board.js","components/Keyboard.js","components/Start.js","components/LostWindow.js","App.js","index.js"],"names":["Pixel","props","cssClass","className","Board","isEqual","a","b","length","i","state","board","map","el","index","coord","Math","floor","apples","key","rocks","find","snake","Keyboard","handleClick","dir","setDirection","type","onClick","StartGame","onStart","LostWindow","onPressStartAgain","App","useState","setApples","setRocks","setSnake","direction","bLost","setBLost","snakeRef","useRef","current","dirRef","applesRef","fieldWidth","bArrEqual","random","min","max","round","onKeyDown","e","onKeyPressed","tabIndex","setTimeout","move","tmp_snake","nextStep","checkCollison","checkForSelfCollision","j","alert","slice","push","lastAddedPixel","createApple","x","y","concat","forEach","part","Array","fill","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af6522c1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Pixel(props) {\r\n\r\n    const cssClass = \"Pixel \" + props.className; \r\n    return (\r\n      <div className={cssClass}>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Pixel;\r\n  ","import React from 'react';\r\nimport Pixel from './Pixel';\r\n\r\n\r\nfunction Board(props) {\r\n    \r\n    const isEqual = function (a, b) {\r\n      // if length is not equal \r\n      if( a.length != b.length ) {\r\n        return false; \r\n        }\r\n      else\r\n      { \r\n      // comapring each element of array \r\n        for( var i = 0; i < a.length; i++ ) {\r\n            if( a[i] != b[i] ) \r\n            return false; \r\n            }\r\n        return true; \r\n      } \r\n    }\r\n    const showPixels = function () {   \r\n            \r\n        return  props.state.board.map(function (el, index) { \r\n              const coord = [ Math.floor(index/10), index%10  ];\r\n\r\n            // проверка в apples наличия el, штриховка красным \r\n               if (isEqual(props.state.apples, coord) ) {\r\n                  return <Pixel el={index} className='apple' key={index} coord={coord}/>\r\n               }\r\n                 // проверка в rocks наличия el, штриховка черным \r\n               if (props.state.rocks.find((el) => {return isEqual(el, coord)}) ) {\r\n                return <Pixel el={index} className='rock' key={index} coord={coord}/>\r\n             }\r\n             if (props.state.snake.find((el) => {return isEqual(el, coord)}) ) {\r\n              return <Pixel el={index} className='snake' key={index} coord={coord}/>\r\n           }\r\n                return <Pixel el={index}  key={index} coord={coord}/>\r\n            })\r\n     }; \r\n\r\n    return (\r\n      <div className=\"Board\">\r\n        \r\n         {showPixels()} \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Board;\r\n  ","import React from 'react';\r\n\r\nexport default function Keyboard (props) {\r\n\r\n\r\n    const handleClick = function (dir) {\r\n        props.dir.setDirection(dir);\r\n       \r\n    }\r\n    return (\r\n        <div className='keyboard'>\r\n            <div type=\"button\" className='keyboard-inner-box' >\r\n              <button className=\"btn-arrow\" onClick={()=>{handleClick('up')}}> &uarr; </button>\r\n            </div>\r\n            <div className='keyboard-inner-box'>\r\n                <button type=\"button\" className=\"btn-arrow \" onClick={()=>{handleClick('left')}}>  &larr; </button>\r\n                <button type=\"button\" className=\"btn-arrow \" onClick={()=>{handleClick('right')}}> &rarr; </button>\r\n              \r\n            </div>\r\n           \r\n            <div className='keyboard-inner-box'>                \r\n                <button type=\"button\" onClick={()=>{handleClick('down')}} className=\"btn-arrow \"> &darr; </button>\r\n            </div>\r\n           \r\n                        \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function StartGame (props) {\r\n\r\n    return (\r\n        <button className=\"start-button\" type='button' onClick={props.onStart}>Start the Game</button>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\n\r\nexport default function LostWindow (props) {\r\n\r\n\r\n    return (<div className=\"lost-window\">\r\n        <button onClick={props.onPressStartAgain}></button>\r\n    </div>)\r\n}","import React, {useState, useRef} from 'react';\n\nimport './App.css';\nimport Board from './components/Board';\nimport Keyboard from './components/Keyboard';\nimport StartGame from './components/Start';\nimport LostWindow from './components/LostWindow';\n\n\nfunction App() {\n  \n  const [apples, setApples] = useState([1,8]);\n  const [rocks, setRocks] = useState([[0,1]]);\n  const [snake, setSnake] =  useState([[1,2], [1,3], [1,4]]);\n  const [direction, setDirection] = useState (\"right\");\n  const [bLost, setBLost] = useState(false);\n  const snakeRef = useRef(snake);\n  snakeRef.current = snake;\n  const dirRef = useRef(direction);\n  dirRef.current = direction;\n  const applesRef = useRef(apples);\n  applesRef.current = apples;\n  const [fieldWidth, setFieldWidth] = useState(10);  \n\n  const bArrEqual = function (a, b) {\n    // if length is not equal \n    if( a.length != b.length ) {\n      return false; \n      }\n    else\n    { \n    // comapring each element of array \n      for( var i = 0; i < a.length; i++ ) {\n          if( a[i] != b[i] ) \n          return false; \n          }\n      return true; \n    } \n  }\n//============================================================================\n  const onStart = function () {  \n    let timerId = setTimeout(function move () {\n    //=============================start of move======================================\n      let tmp_snake, nextStep ;\n      let snake = snakeRef.current;\n      setSnake([[1,2], [1,3], [1,4]]);  // resetting to default value\n\n      //============================start of check collision==============================\n      const checkCollison = function () { // returns true if collision\n        switch (dirRef.current) {\n          case \"right\":\n            nextStep = [snake[snake.length-1][0], snake[snake.length-1][1]+1];\n            for (let i = 0; i < rocks.length; i++) {\n              if (bArrEqual(rocks[i], nextStep )) {\n                 return true \n                }                \n            }  \n            return checkForSelfCollision(nextStep) ? true : false;\n\n            \n          case \"down\":            \n\n            nextStep = [snake[snake.length-1][0]+1, snake[snake.length-1][1]];\n            for (let i = 0; i < rocks.length; i++) {\n              if (bArrEqual(rocks[i], nextStep )) {\n                 return true \n                }\n            }              \n            return checkForSelfCollision(nextStep) ? true : false;\n          case \"left\":            \n\n            nextStep = [snake[snake.length-1][0], snake[snake.length-1][1]-1];\n            for (let i = 0; i < rocks.length; i++) {\n              if (bArrEqual(rocks[i], nextStep )) {\n                 return true ;\n                }\n            }              \n            return checkForSelfCollision(nextStep) ? true : false;\n          case \"up\":             \n\n            nextStep = [snake[snake.length-1][0]-1, snake[snake.length-1][1]];\n            for (let i = 0; i < rocks.length; i++) {\n              if (bArrEqual(rocks[i], nextStep )) {\n                 return true \n                }\n            }              \n            return checkForSelfCollision(nextStep) ? true : false;\n        }\n      };\n\n      const checkForSelfCollision = function (nextStep) {\n        for (let j = 0; j < snake.length; j++) {\n          if (bArrEqual(nextStep, snake[j])) { return true };\n        }\n        return false;\n      };\n\n      //===========================end of check for collision===========================\n      switch (dirRef.current) {\n      \n        case \"right\":     \n            if ((snake[snake.length-1][1]+1 !== fieldWidth) && (!checkCollison())) {            \n              tmp_snake = snake.slice(1);\n              tmp_snake.push([snake[snake.length-1][0], snake[snake.length-1][1]+1]);            \n              setSnake(tmp_snake);           \n              timerId = setTimeout(move, 500);           \n              break;\n          } else {\n            alert(\"you loose!\");\n            // setBLost(true);\n            return\n          }\n          \n        case \"down\":\n          if ((snake[snake.length-1][0]+1 !== fieldWidth) && (!checkCollison())) {            \n            tmp_snake = snake.slice(1);\n            tmp_snake.push([snake[snake.length-1][0]+1, snake[snake.length-1][1]]);            \n            setSnake(tmp_snake);           \n            timerId = setTimeout(move, 500);           \n            break;\n        } else {\n          alert(\"you loose!\");\n          // setBLost(true);\n          return\n        }\n\n        case \"left\":\n            if ( (snake[snake.length-1][1]-1 !== -1) && !checkCollison() ) {            \n              tmp_snake = snake.slice(1);\n              tmp_snake.push([snake[snake.length-1][0], snake[snake.length-1][1]-1]);            \n              setSnake(tmp_snake);           \n              timerId = setTimeout(move, 500);           \n              break;\n          } else {\n            alert(\"you loose!\");\n            // setBLost(true);\n            return\n          }\n          \n        case 'up':\n            if ( (snake[snake.length-1][0]-1 !== -1) && (!checkCollison()) ) {   \n              // const next_step = ...; checkCollision(next_step), checkApple(next_step)\n              \n              tmp_snake = snake.slice(1);\n              tmp_snake.push([snake[snake.length-1][0]-1, snake[snake.length-1][1]]);            \n              setSnake(tmp_snake);           \n              timerId = setTimeout(move, 500);           \n              break;\n          } else {\n            alert(\"you loose!\");\n            // setBLost(true);\n            return\n          }\n         \n      }\n      //=====================logic for eating apples==============================\n      const lastAddedPixel = [tmp_snake[tmp_snake.length-1][0], tmp_snake[tmp_snake.length-1][1]];\n     \n        if (bArrEqual(applesRef.current, lastAddedPixel)) {            //if last added pixel was an apple - grow          \n            setSnake([snake[0], ...tmp_snake]);   // !! \n       \n            function createApple() {  \n              const x = random(0, 9);\n              const y = random(0, 9);              \n              setApples( [x,y]);\n              tmp_snake.concat(rocks).forEach(function isAppleOnSnake(part) {    \n                const foodIsOnSnake = part[0] == applesRef.current[0] && part[1] == applesRef.current[1] ; \n                 if (foodIsOnSnake)   {   createApple();  };\n               });\n            }  \n            createApple();\n            \n        }\n\n      \n\n      //====================end of move================================\n    }, 500);\n  }\n  function random(min, max) { \n    return Math.round((Math.random() * (max-min) + min));\n  }\n\n \n \n\n  function showLostWindow () {\n    return bLost ? <LostWindow onPressStartAgain={()=>{setBLost(false)}}></LostWindow> : null;\n  }\n\n  function onKeyPressed(key) {\n    switch (key) {\n      case 'ArrowUp':\n        return 'up';\n      case 'ArrowDown':\n       return 'down';\n      case 'ArrowLeft':\n        return 'left';\n      case 'ArrowRight':\n        return 'right';\n    }\n  }\n\n  \n  return (\n    \n      <div className=\"App\" onKeyDown = {(e) => setDirection(onKeyPressed(e.key))} tabIndex=\"0\">\n        <StartGame onStart={onStart}></StartGame>\n          <Board state={{board: Array(100).fill(0),\n              apples,\n              rocks,\n              snake,\n              setApples,\n              setRocks,\n              setSnake, direction, setDirection\n              }} >  </Board>\n\n            <Keyboard dir={{direction, setDirection}}  />\n\n            {showLostWindow()}  {/* is it legal? */}\n            \n          \n      </div>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}